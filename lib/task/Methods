Future<void> getAllTasks() async {
  final prefs = await SharedPreferences.getInstance();
  final String? tasksJson = prefs.getString('tasks');

  if (tasksJson != null) {
    final List<dynamic> tasksList = jsonDecode(tasksJson);
    final List<Task> tasks = tasksList.map((task) => Task.fromJson(task)).toList();

    // Print all tasks to console
    for (var task in tasks) {
      print('Task: ${task.toJson()}');
    }
  } else {
    print('No tasks found in SharedPreferences');
  }
}
ref.read(taskProvider).getAllTasks();

void _updateTask() async {
  final updatedTask = widget.task.copyWith(
    name: _nameController.text,
    date: _dateController.text,
    time: _timeController.text,
  );

  await ref.read(taskProvider.notifier).updateTask(updatedTask);
  Navigator.pop(context);
}
Future<void> markTaskAsComplete(int index) async {
  final prefs = await SharedPreferences.getInstance();
  final String? tasksJson = prefs.getString('tasks');

  if (tasksJson != null) {
    final List<dynamic> tasksList = jsonDecode(tasksJson);
    final List<Task> tasks = tasksList.map((task) => Task.fromJson(task)).toList();

    // Update isCompleted for the task at the given index
    if (index >= 0 && index < tasks.length) {
      tasks[index] = tasks[index].copyWith(isCompleted: true);
    }

    // Save updated list back to SharedPreferences
    final String updatedTasksJson = jsonEncode(tasks.map((task) => task.toJson()).toList());
    await prefs.setString('tasks', updatedTasksJson);

    // Notify listeners if you're using ChangeNotifier
    notifyListeners();
  } else {
    print('No tasks found to update');
  }
}
// drop down Button 
DropdownButton<Model>(
  value: selectedModel,
  onChanged: (Model? newValue) {
    setState(() {
      selectedModel = newValue!;
    });
  },
  items: models.map<DropdownMenuItem<Model>>((Model model) {
    return DropdownMenuItem<Model>(
      value: model,
      child: Row(
        children: [
          Icon(model.icon),
          SizedBox(width: 10),
          Text(model.name),
        ],
      ),
    );
  }).toList(),
  selectedItemBuilder: (BuildContext context) {
    return models.map<Widget>((Model model) {
      return Text(model.name);
    }).toList();
  },
);
Future<void> deleteTask(int index) async {
  final prefs = await SharedPreferences.getInstance();
  final String? tasksJson = prefs.getString('tasks');

  if (tasksJson != null) {
    final List<dynamic> tasksList = jsonDecode(tasksJson);
    final List<Task> tasks = tasksList.map((task) => Task.fromJson(task)).toList();

    // Remove the task at the given index
    if (index >= 0 && index < tasks.length) {
      tasks.removeAt(index);
    }

    // Save updated list back to SharedPreferences
    final String updatedTasksJson = jsonEncode(tasks.map((task) => task.toJson()).toList());
    await prefs.setString('tasks', updatedTasksJson);

    // Notify listeners if you're using ChangeNotifier
    notifyListeners();
  } else {
    print('No tasks found to delete');
  }
}
Future<void> deleteTaskById(String id) async {
  final prefs = await SharedPreferences.getInstance();
  final String? tasksJson = prefs.getString('tasks');

  if (tasksJson != null) {
    final List<dynamic> tasksList = jsonDecode(tasksJson);
    final List<Task> tasks = tasksList.map((task) => Task.fromJson(task)).toList();

    // Remove task with matching id
    tasks.removeWhere((task) => task.id == id);

    // Save updated tasks back to SharedPreferences
    final String updatedTasksJson = jsonEncode(tasks.map((task) => task.toJson()).toList());
    await prefs.setString('tasks', updatedTasksJson);

    // Notify listeners to update UI
    notifyListeners();
  } else {
    print('No tasks found to delete');
  }
}

class EditData extends StatelessWidget {
  final Task task;

  EditData({required this.task});

  @override
  Widget build(BuildContext context) {
    final taskProvider = ref.read(taskProvider.notifier);

    return Scaffold(
      appBar: AppBar(
        title: Text('Edit Task'),
        actions: [
          IconButton(
            icon: Icon(Icons.delete, color: Colors.red),
            onPressed: () async {
              await taskProvider.deleteTaskById(task.id!); // Delete task by id
              Navigator.pop(context); // Navigate back to ShowData
            },
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Your other fields for editing the task
          ],
        ),
      ),
    );
  }
}
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

Future<void> removeTask(int taskId) async {
  final prefs = await SharedPreferences.getInstance();
  String? taskJson = prefs.getString('tasks');

  if (taskJson != null) {
    List<Map<String, dynamic>> taskList = List<Map<String, dynamic>>.from(jsonDecode(taskJson));

    // Remove task with the given ID
    taskList.removeWhere((task) => task['id'] == taskId);

    // Save the updated list back
    await prefs.setString('tasks', jsonEncode(taskList));
  }
}


import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';

class Category {
  Category({this.name, this.length, this.dueLength});

  String? name;
  String? length;
  String? dueLength;

  factory Category.fromJson(Map<String, dynamic> json) {
    return Category(
      name: json['name'],
      length: json['length'],
      dueLength: json['dueLength'],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'name': name,
      'length': length,
      'dueLength': dueLength,
    };
  }
}

// SharedPreferences se list ko retrieve karke Category list me convert karna
Future<void> getCategoriesFromPrefs() async {
  SharedPreferences prefs = await SharedPreferences.getInstance();

  // `SharedPreferences` se JSON string list retrieve karna
  List<String>? jsonStringList = prefs.getStringList("categories_key");

  if (jsonStringList != null) {
    // JSON string list ko `Category` object list me convert karna
    List<Category> categories = jsonStringList
        .map((jsonString) => Category.fromJson(jsonDecode(jsonString)))
        .toList();

    // Updated list print karna
    print("\nRetrieved Categories:");
    categories.forEach((cat) {
      print(jsonEncode(cat.toJson())); // JSON format me print
    });
  } else {
    print("No categories found in SharedPreferences.");
  }
}

void main() {
  getCategoriesFromPrefs();
}



