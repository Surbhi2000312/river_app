Future<void> getAllTasks() async {
  final prefs = await SharedPreferences.getInstance();
  final String? tasksJson = prefs.getString('tasks');

  if (tasksJson != null) {
    final List<dynamic> tasksList = jsonDecode(tasksJson);
    final List<Task> tasks = tasksList.map((task) => Task.fromJson(task)).toList();

    // Print all tasks to console
    for (var task in tasks) {
      print('Task: ${task.toJson()}');
    }
  } else {
    print('No tasks found in SharedPreferences');
  }
}
ref.read(taskProvider).getAllTasks();

void _updateTask() async {
  final updatedTask = widget.task.copyWith(
    name: _nameController.text,
    date: _dateController.text,
    time: _timeController.text,
  );

  await ref.read(taskProvider.notifier).updateTask(updatedTask);
  Navigator.pop(context);
}
Future<void> markTaskAsComplete(int index) async {
  final prefs = await SharedPreferences.getInstance();
  final String? tasksJson = prefs.getString('tasks');

  if (tasksJson != null) {
    final List<dynamic> tasksList = jsonDecode(tasksJson);
    final List<Task> tasks = tasksList.map((task) => Task.fromJson(task)).toList();

    // Update isCompleted for the task at the given index
    if (index >= 0 && index < tasks.length) {
      tasks[index] = tasks[index].copyWith(isCompleted: true);
    }

    // Save updated list back to SharedPreferences
    final String updatedTasksJson = jsonEncode(tasks.map((task) => task.toJson()).toList());
    await prefs.setString('tasks', updatedTasksJson);

    // Notify listeners if you're using ChangeNotifier
    notifyListeners();
  } else {
    print('No tasks found to update');
  }
}
// drop down Button 
DropdownButton<Model>(
  value: selectedModel,
  onChanged: (Model? newValue) {
    setState(() {
      selectedModel = newValue!;
    });
  },
  items: models.map<DropdownMenuItem<Model>>((Model model) {
    return DropdownMenuItem<Model>(
      value: model,
      child: Row(
        children: [
          Icon(model.icon),
          SizedBox(width: 10),
          Text(model.name),
        ],
      ),
    );
  }).toList(),
  selectedItemBuilder: (BuildContext context) {
    return models.map<Widget>((Model model) {
      return Text(model.name);
    }).toList();
  },
);

