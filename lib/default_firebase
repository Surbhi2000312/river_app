// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
// import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'dart:convert';
import 'dart:developer';

import 'package:firebase_analytics/firebase_analytics.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:googleapis_auth/auth_io.dart' as auth ;
import 'package:jojo_mvc/utils/constant/router_const.dart';
import '../global_utilities.dart';
import '../widget_helper/widget_helper.dart';

initFirebase()async{
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);
  FirebaseMessaging.onMessage.listen((RemoteMessage message) {
    // Handle the notification here
    flutterLocalNotificationsPlugin.show(
        0,
        "${message.notification?.title}",
        "${message.notification?.body}",
        NotificationDetails(
            android: AndroidNotificationDetails(
                channel.id, // id
                channel.name, // title
                channelDescription: channel.description,
                importance: Importance.high,
                color: Colors.blue,
                playSound: true,
                icon: '@mipmap/ic_launcher'),
            iOS: const DarwinNotificationDetails(
                presentSound: true, presentAlert: true, presentBadge: true)),
        payload: 'Open from Local Notification');
    Get.toNamed(RouterConst.profile);


  });

  FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {

    printLog(msg: 'Notification clicked! The app was in background.');
    Get.toNamed(RouterConst.profile);
    getSnackbar(title: "onMessageOpenedApp",
        subTitle: "${message.notification?.body}",
        isSuccess: true);
    Get.toNamed(RouterConst.profile);

    if (message.data.containsKey('tripID')) {
      String screenName = message.data['screen'];
      Get.toNamed(RouterConst.profile);

      // Navigate to the specific screen
      // if (screenName == 'chat') {
        // Navigator.pushNamed(context, '/chat');

      // } else if (screenName == 'profile') {
        // Navigator.pushNamed(context, '/profile');
      // }
    }
  });
  await flutterLocalNotificationsPlugin
      .resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>()
      ?.createNotificationChannel(channel);

  await FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(
    alert: true,
    badge: true,
    sound: true,
  );
  FirebaseAnalytics.instance.setAnalyticsCollectionEnabled(true);
  getFcmToken();
}
getFcmToken() async {
  String? token = "";
  try {
    token = await FirebaseMessaging.instance.getToken();
    printLog(msg: "Firebase Token : $token");
  } catch (error) {
    printLog(msg: "Firebase Token Error $error");
  }
  return token;
}


Future<void> handler(RemoteMessage message) async
{
  print('');print('');print('');print('');
  print(message.notification!.title);
  print(message.notification!.body);
  print(message.data);
  print('');print('');print('');print('');
}



/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```

class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
      apiKey: '',
    appId: '',
    messagingSenderId: '',
    projectId: '',
    authDomain: '',
    storageBucket: '',
    measurementId: '',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: '',
    appId: '',
    messagingSenderId: '',
    projectId: '',
    authDomain: '',
    storageBucket: '',
    measurementId: '',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: '',
    appId: '',
    messagingSenderId: '',
    projectId: '',
    authDomain: '',
    storageBucket: '',
    measurementId: '',
    iosBundleId: 'com.practice.jojoMvc',
  );

  static const FirebaseOptions macos = FirebaseOptions(
  apiKey: '',
    appId: '',
    messagingSenderId: '',
    projectId: '',
    authDomain: '',
    storageBucket: '',
    measurementId: '',
    apiKey: 'AIzaSyBv61mK29aataq4FEnv77Tp83UaQdYwrxY',
    appId: '1:34375079795:ios:230c35e2ba4f7ea273d706',
    messagingSenderId: '34375079795',
    projectId: 'database-learn-78426',
    storageBucket: 'database-learn-78426.firebasestorage.app',
   
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: '',
    appId: '',
    messagingSenderId: '',
    projectId: '',
    authDomain: '',
    storageBucket: '',
    measurementId: '',
  );

}

Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();
  print("");print("");print("");print("");print("");
  print( 'A bg message just showed up :  ${message.messageId}');
  print("");print("");print("");print("");print("");
}

final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

const AndroidNotificationChannel channel = AndroidNotificationChannel(
    'high_importance_channel',
    'High Importance Notifications',
    importance: Importance.high,
    playSound: true

);

Future<String> getAccessToken() async{

final serviceAccountJson =
{
  'json'
};

List<String> scopes = [
  "https://www.googleapis.com/auth/firebase.messaging"
];

http.Client client = await auth.clientViaServiceAccount(
  auth.ServiceAccountCredentials.fromJson(serviceAccountJson),
  scopes,
);

//get the access token
auth.AccessCredentials credentials = await auth.obtainAccessCredentialsViaServiceAccount(
    auth.ServiceAccountCredentials.fromJson(serviceAccountJson),
    scopes,
    client);
client.close();

  return credentials.accessToken.data;
}

// late BuildContext context;
sendNotificationToSelectedDriver(
    String deviceToken, BuildContext context, String tripID) async
{
  String dropOffDestinationAddress = "jaipur ";
  String pickUpAddress = "Udaipur";

  final String serverAccessTokenKey =
  await getAccessToken(); // Your FCM server access token key
  String endpointFirebaseCloudMessaging =
      'https://fcm.googleapis.com/v1/projects/database-learn-78426/messages:send';

  final Map<String, dynamic> message = {
    'message': {
      'token':
      deviceToken, // Token of the device you want to send the message/notification to
      'notification': {
        "title": "NET TRIP REQUEST from ",
        "body":
        "PickUp Location: $pickUpAddress \nDropOff Location: $dropOffDestinationAddress",
      },
      'data': {
        "tripID": tripID,
      },
    }
  };

  final http.Response response = await http.post(
    Uri.parse(endpointFirebaseCloudMessaging),
    headers: <String, String>{
      'Content-Type': 'application/json',
      'Authorization': 'Bearer $serverAccessTokenKey',
    },
    body: jsonEncode(message),
  );

  if (response.statusCode == 200) {
    print('FCM message sent successfully');
    print(response.body);
  } else {
    print('Failed to send FCM message: ${response.statusCode}');
  }
}




